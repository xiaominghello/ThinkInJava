package io.p533inputoutput;import org.junit.Test;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.FileReader;import java.io.FileWriter;import java.io.IOException;/** * 处理流之一：缓冲流的使用 * * 1.缓冲流： * BufferedInputStream * BufferedOutputStream * BufferedReader * BufferedWriter * * 2.作用：提供流的读取、写入的速度 *   提高读写速度的原因：内部提供了一个缓冲区 * * 3. 处理流，就是“套接”在已有的流的基础上。装饰器模式 * * @author nuc8 * @date 2020/5/12 4:55 下午 */public class BufferedTest {    public void copyFileWithBuffered(String srcPath, String destPath) {        BufferedInputStream bis = null;        BufferedOutputStream bos = null;        try {            File srcFile = new File(srcPath);            File destFile = new File(destPath);            FileInputStream fis = new FileInputStream(srcFile);            FileOutputStream fos = new FileOutputStream(destFile);            bis = new BufferedInputStream(fis);            bos = new BufferedOutputStream(fos);            byte[] buffer = new byte[1024];            int len;            while ((len = bis.read(buffer)) != -1) {                bos.write(buffer, 0, len);            }        } catch (IOException e) {            e.printStackTrace();        } finally {            // 资源关闭            // 要求：先关闭外层的流，再关闭内层的流            // 说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.            if (bis != null) {                try {                    bis.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            if (bos != null) {                try {                    bos.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }    @Test    public void testCopyFileWithBuffered() {        String srcPath = "/Users/SXW/Downloads/漫画算法小灰的算法之旅[www.j9p.com].pdf";        String destPath = "/Users/SXW/Downloads/漫画算法小灰的算法之旅.pdf";        long start = System.currentTimeMillis();        copyFileWithBuffered(srcPath, destPath);        long end = System.currentTimeMillis();        System.out.println("复制用时：" + (end - start) + "毫秒");    }    @Test    public void testBufferedReaderBufferedWriter() {        BufferedReader br = null;        BufferedWriter bw = null;        try {            br = new BufferedReader(new FileReader(new File("src/io/p533inputoutput/hello.txt")));            bw = new BufferedWriter(new FileWriter(new File("src/io/p533inputoutput/hello2.txt")));            // 方式一：//            char[] cbuf = new char[5];//            int len;//            while ((len = br.read(cbuf)) != -1) {//                bw.write(cbuf, 0, len);//            }            // 方式二：            String line;            while ((line = br.readLine()) != null) {                // line结尾不包含换行符                bw.write(line);                // 提供换行的操作                bw.newLine();            }        } catch (IOException e) {            e.printStackTrace();        } finally {            if (br != null) {                try {                    br.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            if (bw != null) {                try {                    bw.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }}